[
  {
    "title": "Wizard Outfitter",
    "tech": ["GitHub", "Figma"],
    "steps": [
      {
        "label": "Overview",
        "description": "Wizard Outfitter is a web app designed to help Wizard101 players easily plan gear and compare loadouts tailored to their wizard’s school and level. It provides fast, intuitive filtering of gear stats across schools, supports saving multiple wizards, and lets players quickly toggle between builds. By reducing the need to reference outdated or scattered tools, Wizard Outfitter streamlines the gear planning process for both new and experienced players.<br /><br />The idea for the project began in 2018, when I built a prototype that went on to win Best Non-Gaming Project at a Neumont College of Computer Science event. That early version validated the concept — and in the current rebuild, I’m applying full-stack development practices to bring the idea to life using modern technologies and UI principles.<br /><br />The project is being built using React, Tailwind CSS, and local storage to handle wizard profiles and UI state. Eventually, the app will expand to include features like:<ul><li>User accounts and persistent cloud-saved wizards</li><li>Community builds for sharing and exploring other players’ loadouts</li><li>Card and deck integration for full spell strategy planning</li></ul></ul><br />To power the app with real data, I wrote a Python web scraper that extracts gear and card information from third-party sources. The scraper formats the data into clean CSV files, which can be easily imported into various databases for long-term flexibility and scalability.<br /><br />Wizard Outfitter is being built with accessibility, performance, and usability in mind. Based on user feedback, the project is also planned to evolve into a companion mobile app, offering native access to gear and card planning across devices. Overall, the project is a passion-driven, long-term build that showcases my full-stack development skills — from scripting and data engineering to UI/UX and product design.",
        "graphs": [{
          "key": "gearLookup",
          "type": "bar",
          "question": "How Often do you look up gear while playing Wizard101",
          "labels": [
            "1 - Never",
            "2 - Rarely",
            "3 - Sometimes",
            "4 - Frequently",
            "5 - Very Frequently"
          ],
          "title": "How Often Do You Look Up Gear?"
        }]
      },{
        "label": "User Stories",
        "stories": [
          "As a visitor, I want to create a wizard (choose school & level) the first time I arrive, so that all gear suggestions are relevant.",
          "As a visitor, I want my current wizard saved to local storage automatically, so I don’t need an account to keep browsing later.",
          "As a visitor, I want to create, store, and switch between multiple wizards in the browser, so that I can plan gear for several characters without signing up.",
          "As a visitor, I want a persistent drawer where I can view or edit my wizard and equip gear, so that I can tweak my build without leaving the gear list.",
          "As a visitor, I want search and quick‑filter controls that respond in under 200 ms, so that I can zero‑in on the exact gear I need.",
          "As a visitor, I want to filter the gear grid to show only items compatible with my current wizard, so that I’m not distracted by unusable options.",
          "As a user, I want each gear card to show where and how to obtain the item (boss drop, pack, craft, vendor, etc.), so that I can plan to acquire it.",
          "As a user, I want a gear‑set calculator that totals my wizard’s current stats and lets me compare two loadouts side‑by‑side, so that I can see which set is best.",
          "As a user, I want each gear card to display a quick delta versus what my wizard is wearing, so that upgrades jump out immediately.",
          "As a user, I want to save a loadout with a custom name and description, so that I can remember why I built it and what it’s for.",
          "As a user, I want to export or share a saved loadout via a link or file, so that friends (or my future self) can import it instantly.",
          "As a logged‑in user, I want my wizards and settings to sync to my account, so that I can access them on any device.",
          "As a visitor, I want a gentle prompt to create an account only when cross‑device sync would help me, so that I understand the benefit of logging in without feeling forced.",
          "As a visitor, I want a Clear Data button that wipes all locally stored wizards and preferences, so that I can safely use the site on a shared computer.",
          "As a user, I want gear‑slot buttons that expand to reveal details, so that the layout stays clean but info is one click away.",
          "As a user, I want the site’s secondary color to switch to my wizard’s school color, so that the interface feels personalized.",
          "As a user, I want a dark/light theme toggle, so that I can browse comfortably in any lighting.",
          "As a user, I want the site to be desktop‑first but fully responsive on mobile, so that I get a smooth experience on the main platform players prefer while still supporting phones and tablets.",
          "As a user, I want a separate Community Builds page so that I can explore and share loadouts without cluttering my own gear management.",
          "As a user, I want to copy or import a community build into my own wizards, so that I can try it out quickly.",
          "As a user, I want to rate or comment on community builds so that quality loadouts surface over time."
        ]
      }, {
        "label": "Wireframe",
        "description": "Before writing a line of code, I started with a solid foundation: gathering user feedback and building wireframes to define functionality and layout. Using a Google Form, I collected input from potential users to identify their needs, which I then translated into user stories. These stories are showcased in a carousel to highlight the range of player goals the tool is designed to support.<br /><br />A key feature that emerged early was the use of a persistent drawer for managing wizards—allowing users to view what’s currently equipped, make quick comparisons, and easily switch between saved wizards. The wireframes also explored how gear cards should display stats and how filters could update results in real time.<br /><br />Although I kept the wireframes low-fidelity to iterate quickly, I was intentional about including real text and layout constraints to ensure everything would scale correctly, especially considering the large volume of stats and gear information in Wizard101. I also planned for responsiveness across desktop, tablet, and mobile to ensure a smooth experience on all devices.",
        "previewWireFrameLink": "https://embed.figma.com/proto/HXMQS0Au4lOrGvApiUvA2Y/Wizard-Outfitter-WireFrame?node-id=4-5&p=f&scaling=min-zoom&content-scaling=fixed&page-id=0%3A1&starting-point-node-id=4%3A5&embed-host=share",
        "viewInFigmaLink": "https://embed.figma.com/design/HXMQS0Au4lOrGvApiUvA2Y/Wizard-Outfitter-WireFrame?node-id=0-1&embed-host=share",
        "userfeedback": ""
      }
    ],
    "description": "Custom Minecraft mod integrating Dungeons & Dragons mechanics including health, armor class, initiative, and character sheets.",
    "url": "https://github.com/FirebrickRed/MinecraftDnD"
  }, {
    "title": "SubOptimalGaming",
    "tech": ["GitHub", "Svelte", "Netlify"],
    "steps": [
      {
        "label": "Overview",
        "description": "<p>SubOptimalGaming is an evolving website built for an amateur esports team competing in a League of Legends tournament. Designed to showcase the team's roster, share blog updates, and integrate live game data, the project is actively being developed with the most complete sections currently being the Rosters and Blogs. I served as the full-stack developer, collaborating closely with a designer to implement the visual and brand direction.<br /><br /></p><ul><li><strong>Player Rosters:</strong> Dynamic pages for team members, including names, roles, and bios.</li><li><strong>Blog System:</strong> Managed through Netlify CMS, allowing non-developers to easily post match recaps, news, and announcements.</li><li><strong>API Integrations:</strong> Pulls live stats and game data using the Riot Games API and Steam API.</li><li><strong>Lightweight Frontend:</strong> Built with Svelte for a fast, reactive experience.</li></ul><br /><br /><p><strong>Tech Stack:</strong><br>Frontend: Svelte<br>Backend / CMS: Netlify Functions, Netlify CMS<br>APIs: Riot Games API, Steam API<br>Hosting & CI/CD: Netlify</p><br /><br /><p><strong>Future Plans:</strong></p><ul><li>Add Twitch integration to display clips when no team members are live.</li><li>Showcase top plays and proud game moments with embedded Twitch or YouTube clips.</li></ul>"
      }, {
        "label": "Delivered",
        "githublink": "https://github.com/FirebrickRed/SubOptimalGaming",
        "livesite": "https://suboptimalgaming.com/"
      }
    ]
  }, {
    "title": "Minecraft D&D Mod",
    "tech": ["Java", "Gradle", "PaperMC", "GitHub"],
    "steps": [
      {
        "label": "Overview",
        "description": "A custom Minecraft mod that brings Dungeons & Dragons mechanics into the game. Features include character sheets, armor class calculations, initiative tracking, and unique health displays. Designed to enhance immersive D&D gameplay directly within Minecraft.<br /><br />Pictures coming soon."
      },
      {
        "label": "Delivered",
        "githublink": "https://github.com/FirebrickRed/MinecraftDnD"
      }
    ]
  }, {
    "title": "Dine at Nite",
    "tech": ["PhaserJs", "Godot", "GitHub", "AWS Amplify", "Route 53"],
    "steps": [
      {
        "label": "Overview",
        "description": "A diner management game inspired by Diner Dash. Built with PhaserJS and prototyped in Godot, it allows players to seat, serve, and manage customer flow. Drag-and-drop mechanics bring fast-paced chaos to your digital restaurant!"
      },
      {
        "label": "Delivered",
        "githublink": "https://github.com/FirebrickRed/WebGames",
        "livesite": "https://jsarcadegames.com/#gamePage/dineatnite"
      }
    ]
  }, {
    "title": "Terraria House Creator",
    "tech": ["CreateJs", "JavaScript", "AWS Amplify", "GitHub"],
    "steps": [
      {
        "label": "Overview",
        "description": "A web-based planning tool to design and layout Terraria housing. Helps players visualize and plan NPC-compliant builds before executing them in-game."
      },
      {
        "label": "Delivered",
        "livesite": "https://main.d2g6ta6c01cvt4.amplifyapp.com/",
        "githublink": "https://github.com/FirebrickRed/TerrariaHouseCreator"
      }
    ]
  }, {
    "title": "Skylander Collection",
    "tech": ["JavaScript", "AWSAmplify", "DynamoDB", "API Gateway", "Lambda", "GitHub"],
    "steps": [
      {
        "label": "Overview",
        "description": "A collection management web app for Skylanders figurines. Allows users to track owned characters, filter by game or element, and organize their collection visually."
      },
      {
        "label": "Delivered",
        "livesite": "https://master.d18pno1xzcqmg5.amplifyapp.com/",
        "githublink": "https://github.com/FirebrickRed/SkylanderCollection"
      }
    ]
  }
]
